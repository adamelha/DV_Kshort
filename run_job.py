import argparse
import os
import subprocess
import re
import random
import time
'''
Running this script:
running: python run_job.py --help
will explain how to run the script, it will show something like:
usage: run_job.py [-h] [--grid] [--datafile DATAFILE]

optional arguments:
  -h, --help           show this help message and exit
  --grid, -g           submit job to grid instead of running locally (local by
                       default)
  --datafile DATAFILE  If running locally: this should be the path to the data
                       file.If running on Grid: This should be the file you
                       wish to run


By default, the input file will be the one in share/Ks_jo.py
One of the following should be the input file:
for GRID:
mc15_13TeV:mc15_13TeV.308322.Pythia8EvtGen_A14NNPDF23LO_WmuHNL50_15G_lt01dd.recon.DAOD_RPVLL.e5870_s2726_r8788_tid11691312_00
mc15_13TeV.308324.Pythia8EvtGen_A14NNPDF23LO_WmuHNL50_2G_lt10dd.merge.AOD.e5870_a766_a821_r7676_tid10981533_00
mc15_13TeV:mc15_13TeV.305354.Pythia8EvtGen_A14NNPDF23LO_WmuHNL50_20G_lt01dd.recon.DAOD_RPVLL.e4986_s2726_r8788_tid11691323_00
mc15_13TeV.308379.Pythia8EvtGen_A14NNPDF23LO_WmuHNL50_3G_lt01dd.merge.AOD.e5876_a766_a821_r7676_tid10996045_00

mc15_13TeV:mc15_13TeV.308326.Pythia8EvtGen_A14NNPDF23LO_WmuHNL50_10G_lt01dd.recon.DAOD_RPVLL.e5870_s2726_r8788_tid11691303_00

Or any of the other DAOD_RPVLL samples listed at:
https://twiki.cern.ch/twiki/bin/viewauth/AtlasProtected/ExoticLongLivedHeavyNeutralLepton

for local:
local file example /afs/cern.ch/user/a/aelhakha/public/DAOD_RPVLL.10626802._032446.pool.root.1

'''

def run_shell_cmd(cmd):
    print 'Executing command:\n' + cmd
    os.system(cmd)

def new_datafile_string(jo_string, datafile):
    return '# THIS IS AN AUTOGENERATED FILE - DO NOT EDIT\n' + re.sub(r'acf.FilesInput( )*=( )*.*\n', 'acf.FilesInput = [' + datafile + ']\n'.format(datafile), jo_string)

def gen_jo_file(datafile):
    with open(JO_FILE, 'r') as myfile:
        jo_string = myfile.read()

    # If user provided datafile path
    if datafile != '':
        print 'Using datafile provided in command line: ' + datafile
        jo_string = new_datafile_string(jo_string, datafile)

    # Write new string as no generated JO file
    with open(JO_NEW_FILE, "w") as gen_jo_file:
        gen_jo_file.write(jo_string)


def run_local(datafile):
    gen_jo_file(datafile)
    # Run the job
    run_shell_cmd('cd ' + os.path.dirname(os.path.abspath(__file__)) + '/WorkArea/run && athena.py ' + JO_NEW_FILE + ' | tee ' + LOG_FILE)

def run_grid(datafile):
    # Make sure user provided datafile
    if datafile == '':
        return 1

    # Simply copy the same file
    gen_jo_file('')
    output_ds_name = datafile.split(':')[1]
    output_ds_name = output_ds_name.split('.')

    # Add a random number at the end so we can reuse the datafile after changes in the code
    output_ds_name = output_ds_name[0] + '.' + output_ds_name[1] + '.' + str(random.randint(0, 999999999))

    run_shell_cmd('cd ' + os.path.dirname(os.path.abspath(__file__)) + '/WorkArea/run && ' + PATHENA + ' ' + JO_NEW_FILE + ' --inDS ' + datafile + ' --outDS user.' + os.environ['USER'] + '.' + output_ds_name)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--grid", "-g", help="submit job to grid instead of running locally (local by default)",
                        action="store_true")
    parser.add_argument("--datafile", type=str, default='', required=False,
                        help="If running locally: this should be the path to the data file."
                             "If running on Grid: This should be the file you wish to run")
    args = parser.parse_args()

    if args.grid:
        print 'Selected to submit job to Grid'
        run_grid(args.datafile)

    else:
        print 'Selected to run job locally'
        run_local(args.datafile)

if __name__ == '__main__':
    JO_NEW_FILE_NAME = "gen_jo_Ks.py"
    JO_FILE_NAME = "jo_Ks.py"
    JO_FILE = os.path.dirname(os.path.abspath(__file__)) + "/DV_Kshort/share/" + JO_FILE_NAME
    JO_NEW_FILE = os.path.dirname(os.path.abspath(__file__)) + "/WorkArea/run/" + JO_NEW_FILE_NAME
    LOG_FILE = os.path.dirname(os.path.abspath(__file__)) + "/run_log_local.txt"
    PATHENA = "/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase/x86_64/PandaClient/0.5.96/bin/pathena"

    main()